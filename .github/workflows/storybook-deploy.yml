name: Deploy Storybook to GitHub Pages

on:
  push:
    branches:
      - '**'  # Trigger on all branches
    paths:
      - 'src/**'
      - '.github/workflows/storybook-deploy.yml'
  pull_request:
    paths:
      - 'src/**'
    types: [opened, synchronize, reopened]
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: write
  pages: write
  id-token: write
  pull-requests: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
concurrency:
  group: "pages-${{ github.ref }}"
  cancel-in-progress: false

jobs:
  # Check if we should build Storybook (has stories)
  check-stories:
    runs-on: ubuntu-latest
    outputs:
      has-stories: ${{ steps.check.outputs.has-stories }}
      branch-name: ${{ steps.branch.outputs.branch-name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get branch name
        id: branch
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "branch-name=${{ github.head_ref }}" >> $GITHUB_OUTPUT
          else
            echo "branch-name=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT
          fi

      - name: Check for stories
        id: check
        run: |
          if find src -name "*.stories.*" -type f | grep -q .; then
            echo "has-stories=true" >> $GITHUB_OUTPUT
            echo "Found Storybook stories, proceeding with deployment"
          else
            echo "has-stories=false" >> $GITHUB_OUTPUT
            echo "No Storybook stories found, skipping deployment"
          fi

  # Build and deploy job
  build-and-deploy:
    needs: check-stories
    if: needs.check-stories.outputs.has-stories == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for all branches

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.0.0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
          cache-dependency-path: 'pnpm-lock.yaml'

      - name: Install dependencies
        run: |
          pnpm install --frozen-lockfile

      - name: Build all feature branches and current branch
        run: |
          echo "🏗️ Building complete site with all feature branches..."
          mkdir -p deployment/feature-branches
          
          CURRENT_BRANCH="${{ needs.check-stories.outputs.branch-name }}"
          echo "📍 Current branch: $CURRENT_BRANCH"
          
          # Get all feature branches (branches that start with 'feat')
          echo "🔍 Finding all feature branches..."
          git fetch --all
          ALL_BRANCHES=$(git branch -r | grep -E 'origin/feat' | sed 's/origin\///' | tr -d ' ')
          
          echo "📝 Found feature branches:"
          for branch in $ALL_BRANCHES; do
            echo "  - $branch"
          done
          
          # Build each feature branch
          for branch in $ALL_BRANCHES; do
            echo "🏗️ Building feature branch: $branch"
            CLEAN_BRANCH=$(echo "$branch" | sed 's/[^a-zA-Z0-9-]/-/g' | tr '[:upper:]' '[:lower:]')
            
            if git checkout "$branch" 2>/dev/null; then
              echo "✅ Checked out $branch"
              
              if pnpm run build-storybook --output-dir "storybook-$CLEAN_BRANCH"; then
                echo "✅ Built storybook for $branch"
                mkdir -p "deployment/feature-branches/$CLEAN_BRANCH"
                cp -r "storybook-$CLEAN_BRANCH"/* "deployment/feature-branches/$CLEAN_BRANCH/"
                echo "✅ Deployed $branch to feature-branches/$CLEAN_BRANCH/"
              else
                echo "⚠️ Failed to build storybook for $branch"
              fi
            else
              echo "⚠️ Could not checkout $branch"
            fi
          done
          
          # Build master/main branch for root
          echo "🏠 Building master branch for root..."
          if git checkout master 2>/dev/null || git checkout main 2>/dev/null; then
            echo "✅ Checked out master/main"
            if pnpm run build-storybook --output-dir storybook-master; then
              echo "✅ Built master storybook"
              cp -r storybook-master/* deployment/
            else
              echo "⚠️ Failed to build master storybook"
            fi
          fi
          
          # Return to current branch
          git checkout "$CURRENT_BRANCH"
          
          # Add .nojekyll file
          touch deployment/.nojekyll
          
          echo "📊 Final deployment structure:"
          find deployment -maxdepth 3 -type d | sort
          echo "🌿 Feature branches available:"
          ls -la deployment/feature-branches/ 2>/dev/null || echo "No feature branches"

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./deployment

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Get deployment URL
        id: get-url
        run: |
          BRANCH_NAME="${{ needs.check-stories.outputs.branch-name }}"
          BASE_URL="${{ steps.deployment.outputs.page_url }}"
          
          if [[ "$BRANCH_NAME" == "main" || "$BRANCH_NAME" == "master" || "$BRANCH_NAME" == "trunk" ]]; then
            echo "page-url=${BASE_URL}" >> $GITHUB_OUTPUT
            echo "hub-url=${BASE_URL}" >> $GITHUB_OUTPUT
            echo "Deployed main Storybook to: ${BASE_URL}"
          else
            CLEAN_BRANCH=$(echo "$BRANCH_NAME" | sed 's/[^a-zA-Z0-9-]/-/g' | tr '[:upper:]' '[:lower:]')
            echo "page-url=${BASE_URL}feature-branches/${CLEAN_BRANCH}/" >> $GITHUB_OUTPUT
            echo "hub-url=${BASE_URL}" >> $GITHUB_OUTPUT
            echo "Deployed feature branch to: ${BASE_URL}feature-branches/${CLEAN_BRANCH}/"
            echo "All feature branches available at: ${BASE_URL}feature-branches/"
            echo "Main branch available at: ${BASE_URL}"
          fi

  # Cleanup job for merged/deleted branches  
  cleanup-branches:
    if: github.event_name == 'push' && github.event.before != '0000000000000000000000000000000000000000'
    runs-on: ubuntu-latest
    steps:
      - name: Check for deleted branches
        run: |
          echo "🧹 Checking for branches that need cleanup..."
          # This runs when branches are merged/deleted
          # For now, manual cleanup - could be enhanced later
          echo "Manual cleanup may be needed for old feature branches"