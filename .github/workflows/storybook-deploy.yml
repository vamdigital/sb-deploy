name: Deploy Storybook to GitHub Pages

on:
  push:
    branches:
      - '**'  # Trigger on all branches
    paths:
      - 'src/**'
      - '.github/workflows/storybook-deploy.yml'
  pull_request:
    paths:
      - 'src/**'
    types: [opened, synchronize, reopened]
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: write
  pages: write
  id-token: write
  pull-requests: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
concurrency:
  group: "pages-${{ github.ref }}"
  cancel-in-progress: false

jobs:
  # Check if we should build Storybook (has stories)
  check-stories:
    runs-on: ubuntu-latest
    outputs:
      has-stories: ${{ steps.check.outputs.has-stories }}
      branch-name: ${{ steps.branch.outputs.branch-name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get branch name
        id: branch
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "branch-name=${{ github.head_ref }}" >> $GITHUB_OUTPUT
          else
            echo "branch-name=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT
          fi

      - name: Check for stories
        id: check
        run: |
          if find src -name "*.stories.*" -type f | grep -q .; then
            echo "has-stories=true" >> $GITHUB_OUTPUT
            echo "Found Storybook stories, proceeding with deployment"
          else
            echo "has-stories=false" >> $GITHUB_OUTPUT
            echo "No Storybook stories found, skipping deployment"
          fi

  # Build and deploy job
  build-and-deploy:
    needs: check-stories
    if: needs.check-stories.outputs.has-stories == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.0.0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
          cache-dependency-path: 'pnpm-lock.yaml'

      - name: Install dependencies
        run: |
          pnpm install --frozen-lockfile

      - name: Build Storybook
        run: |
          pnpm run build-storybook
        env:
          NODE_OPTIONS: --max_old_space_size=4096

      - name: Fetch and restore existing site content
        continue-on-error: true
        run: |
          # Fetch existing content from gh-pages branch to preserve all deployments
          echo "🔄 Fetching existing site content from gh-pages branch..."
          
          # Create deployment directory
          mkdir -p deployment
          
          # Try to fetch and restore from gh-pages branch
          if git ls-remote --heads origin gh-pages | grep -q gh-pages; then
            echo "✅ Found existing gh-pages branch"
            git fetch origin gh-pages
            git checkout gh-pages
            
            # Show current structure
            echo "📂 Current site structure:"
            ls -la . | head -10
            if [ -d "feature-branches" ]; then
              echo "📁 Current feature branches:"
              ls -la feature-branches/ || echo "feature-branches empty"
            fi
            
            # Copy ALL existing content to deployment directory
            echo "📋 Copying all existing content..."
            cp -r * deployment/ 2>/dev/null || echo "No content to copy"
            
            # Switch back to current branch  
            git checkout ${{ github.ref_name }}
            
            echo "✅ Restored existing site content"
          else
            echo "ℹ️ No existing gh-pages branch found - fresh deployment"
          fi

      - name: Update deployment with current branch
        run: |
          # Now update the deployment with the current branch's content
          BRANCH_NAME="${{ needs.check-stories.outputs.branch-name }}"
          CLEAN_BRANCH=$(echo "$BRANCH_NAME" | sed 's/[^a-zA-Z0-9-]/-/g' | tr '[:upper:]' '[:lower:]')
          
          echo "🚀 Updating deployment with: $BRANCH_NAME -> $CLEAN_BRANCH"
          
          if [[ "$BRANCH_NAME" == "main" || "$BRANCH_NAME" == "master" || "$BRANCH_NAME" == "trunk" ]]; then
            # Main branch: preserve feature-branches but update root
            echo "📂 Updating main branch (preserving feature branches)"
            
            if [ -d "deployment/feature-branches" ]; then
              echo "📁 Backing up existing feature-branches"
              mv deployment/feature-branches /tmp/feature-branches-backup
            fi
            
            # Clear root files but preserve directories
            find deployment -maxdepth 1 -type f -delete 2>/dev/null || true
            
            # Copy new main storybook to root
            cp -r storybook-static/* deployment/
            
            # Restore feature-branches
            if [ -d "/tmp/feature-branches-backup" ]; then
              mv /tmp/feature-branches-backup deployment/feature-branches
              echo "✅ Restored feature-branches directory"
            fi
            
            echo "🎉 Main branch updated, feature branches preserved"
          else
            # Feature branch: update specific feature branch directory
            echo "📁 Updating feature branch: feature-branches/$CLEAN_BRANCH"
            mkdir -p "deployment/feature-branches/$CLEAN_BRANCH"
            cp -r storybook-static/* "deployment/feature-branches/$CLEAN_BRANCH/"
            echo "✅ Feature branch $CLEAN_BRANCH updated"
          fi
          
          # Add .nojekyll file
          touch deployment/.nojekyll
          
          # Show final structure
          echo "📊 Final deployment structure:"
          find deployment -maxdepth 2 -type d | sort
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./deployment
          keep_files: true
          enable_jekyll: false

      - name: Get deployment URL
        id: get-url
        run: |
          BRANCH_NAME="${{ needs.check-stories.outputs.branch-name }}"
          BASE_URL="https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}"
          
          if [[ "$BRANCH_NAME" == "main" || "$BRANCH_NAME" == "master" || "$BRANCH_NAME" == "trunk" ]]; then
            echo "page-url=${BASE_URL}/" >> $GITHUB_OUTPUT
            echo "hub-url=${BASE_URL}/" >> $GITHUB_OUTPUT
            echo "Deployed main Storybook to: ${BASE_URL}/"
          else
            CLEAN_BRANCH=$(echo "$BRANCH_NAME" | sed 's/[^a-zA-Z0-9-]/-/g' | tr '[:upper:]' '[:lower:]')
            echo "page-url=${BASE_URL}/feature-branches/${CLEAN_BRANCH}/" >> $GITHUB_OUTPUT
            echo "hub-url=${BASE_URL}/" >> $GITHUB_OUTPUT
            echo "Deployed feature branch to: ${BASE_URL}/feature-branches/${CLEAN_BRANCH}/"
          fi