name: Deploy Storybook to GitHub Pages

on:
  push:
    branches:
      - '**'  # Trigger on all branches
    paths:
      - 'src/**'
      - '.github/workflows/storybook-deploy.yml'
  pull_request:
    paths:
      - 'src/**'
    types: [opened, synchronize, reopened]
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: write
  pages: write
  id-token: write
  pull-requests: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
concurrency:
  group: "pages-${{ github.ref }}"
  cancel-in-progress: false

jobs:
  # Check if we should build Storybook (has stories)
  check-stories:
    runs-on: ubuntu-latest
    outputs:
      has-stories: ${{ steps.check.outputs.has-stories }}
      branch-name: ${{ steps.branch.outputs.branch-name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get branch name
        id: branch
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "branch-name=${{ github.head_ref }}" >> $GITHUB_OUTPUT
          else
            echo "branch-name=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT
          fi

      - name: Check for stories
        id: check
        run: |
          if find src -name "*.stories.*" -type f | grep -q .; then
            echo "has-stories=true" >> $GITHUB_OUTPUT
            echo "Found Storybook stories, proceeding with deployment"
          else
            echo "has-stories=false" >> $GITHUB_OUTPUT
            echo "No Storybook stories found, skipping deployment"
          fi

  # Build and deploy job
  build-and-deploy:
    needs: check-stories
    if: needs.check-stories.outputs.has-stories == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.0.0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
          cache-dependency-path: 'pnpm-lock.yaml'

      - name: Install dependencies
        run: |
          pnpm install --frozen-lockfile

      - name: Build Storybook
        run: |
          pnpm run build-storybook
        env:
          NODE_OPTIONS: --max_old_space_size=4096

      - name: Download existing deployed site
        run: |
          echo "üì• Downloading existing site to preserve all feature branches..."
          SITE_URL="https://vamdigital.github.io/sb-deploy"
          
          # Create deployment directory and try to download existing content
          mkdir -p deployment
          
          # Use wget to recursively download the existing site
          echo "üåê Attempting to download from: $SITE_URL"
          # More aggressive wget options to get everything
          if wget -r -np -nH -E -T 10 --reject="*.tmp,*.temp" -P deployment/ "$SITE_URL/" 2>/dev/null; then
            echo "‚úÖ Successfully downloaded existing site content"
          elif curl -f "$SITE_URL/feature-branches/" > /dev/null 2>&1; then
            echo "üîÑ wget failed, trying curl for feature-branches..."
            # Try to get feature branches using curl and create directory structure
            mkdir -p deployment/feature-branches
            # This is a fallback - we'll rely on the existing structure being minimal
          else
            echo "‚ÑπÔ∏è No existing site found or download failed - will create fresh deployment"
          fi
          
          # Clean up common wget artifacts
          find deployment -name "robots.txt*" -delete 2>/dev/null || true
          find deployment -name "index.html*" -not -name "index.html" -delete 2>/dev/null || true
          
          echo "üìÇ Downloaded site structure:"
          find deployment -maxdepth 3 -type d 2>/dev/null | sort || echo "Empty deployment directory"

      - name: Build complete site with all branches
        run: |
          echo "üèóÔ∏è Building complete site structure with ALL branches..."
          
          CURRENT_BRANCH="${{ needs.check-stories.outputs.branch-name }}"
          CURRENT_CLEAN=$(echo "$CURRENT_BRANCH" | sed 's/[^a-zA-Z0-9-]/-/g' | tr '[:upper:]' '[:lower:]')
          
          echo "üìç Current branch: $CURRENT_BRANCH -> $CURRENT_CLEAN"
          
          # Step 1: Always build and deploy master/main branch to root (unless current branch IS master)
          if [[ "$CURRENT_BRANCH" != "main" && "$CURRENT_BRANCH" != "master" && "$CURRENT_BRANCH" != "trunk" ]]; then
            echo "üîÑ Building master branch for root deployment..."
            
            # Fetch and build master branch
            git fetch origin master:master 2>/dev/null || git fetch origin main:main 2>/dev/null || echo "Could not fetch main branch"
            
            # Check out master temporarily and build it
            ORIGINAL_BRANCH=$CURRENT_BRANCH
            if git show-ref --verify --quiet refs/heads/master; then
              git checkout master
              echo "üì¶ Building Storybook for master branch..."
              pnpm run build-storybook --output-dir storybook-master 2>/dev/null || echo "Could not build master storybook"
              
              if [ -d "storybook-master" ]; then
                echo "‚úÖ Master storybook built successfully"
                cp -r storybook-master/* deployment/
              else
                echo "‚ö†Ô∏è Master storybook build failed - deploying placeholder"
                echo "<h1>Master Branch Storybook</h1><p>Please deploy from master branch to update.</p>" > deployment/index.html
              fi
              
              git checkout $ORIGINAL_BRANCH
            else
              echo "‚ö†Ô∏è Master branch not found - deploying without root content"
            fi
          fi
          
          # Step 2: Deploy current branch to its correct location  
          if [[ "$CURRENT_BRANCH" == "main" || "$CURRENT_BRANCH" == "master" || "$CURRENT_BRANCH" == "trunk" ]]; then
            echo "üè† Current branch is main - deploying to root (preserving feature branches)"
            # Preserve feature-branches directory if it exists
            if [ -d "deployment/feature-branches" ]; then
              echo "üíæ Backing up existing feature branches..."
              mv deployment/feature-branches deployment/feature-branches-backup 2>/dev/null || true
            fi
            
            # Deploy master content to root
            cp -r storybook-static/* deployment/
            
            # Restore feature branches
            if [ -d "deployment/feature-branches-backup" ]; then
              echo "üîÑ Restoring feature branches..."
              mv deployment/feature-branches-backup deployment/feature-branches
            fi
          else
            echo "üìÅ Current branch is feature - deploying to feature-branches/$CURRENT_CLEAN"
            mkdir -p "deployment/feature-branches/$CURRENT_CLEAN"
            cp -r storybook-static/* "deployment/feature-branches/$CURRENT_CLEAN/"
          fi
          
          # Add .nojekyll file
          touch deployment/.nojekyll
          
          # Show final structure
          echo "üìä Complete deployment structure:"
          find deployment -maxdepth 2 -type d | sort
          echo "üìã Root files:"
          ls -la deployment/ | head -5


      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./deployment

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Get deployment URL
        id: get-url
        run: |
          BRANCH_NAME="${{ needs.check-stories.outputs.branch-name }}"
          BASE_URL="${{ steps.deployment.outputs.page_url }}"
          
          if [[ "$BRANCH_NAME" == "main" || "$BRANCH_NAME" == "master" || "$BRANCH_NAME" == "trunk" ]]; then
            echo "page-url=${BASE_URL}" >> $GITHUB_OUTPUT
            echo "hub-url=${BASE_URL}" >> $GITHUB_OUTPUT
            echo "Deployed main Storybook to: ${BASE_URL}"
          else
            CLEAN_BRANCH=$(echo "$BRANCH_NAME" | sed 's/[^a-zA-Z0-9-]/-/g' | tr '[:upper:]' '[:lower:]')
            echo "page-url=${BASE_URL}feature-branches/${CLEAN_BRANCH}/" >> $GITHUB_OUTPUT
            echo "hub-url=${BASE_URL}" >> $GITHUB_OUTPUT
            echo "Deployed feature branch to: ${BASE_URL}feature-branches/${CLEAN_BRANCH}/"
          fi